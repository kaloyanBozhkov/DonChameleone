// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    ownership   Ownership[]
    playSession PlaySession[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// APP
model Ownership {
    id String @id @default(uuid())

    userId    String?
    user      User?      @relation(fields: [userId], references: [id])
    cardPacks CardPack[]

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model CardPack {
    id String @id @default(uuid())

    title      String
    song       String
    donVariant String

    questions Question[]

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    ownership   Ownership? @relation(fields: [ownershipId], references: [id])
    ownershipId String?

    room Room[]
}

model Question {
    id String @id @default(uuid())

    q String

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    cardPack   CardPack @relation(fields: [cardPackId], references: [id])
    cardPackId String

    // @TODO add q track
}

enum VOTE {
    NOT_VOTED
    YES
    NO
}

model PlaySession {
    id          String  @id @default(uuid())
    user        User    @relation(fields: [userId], references: [id])
    userId      String
    room        Room    @relation(fields: [roomId], references: [id])
    roomId      String
    isPlaying   Boolean @default(true)
    isAbandoned Boolean @default(false)
    isLiar      Boolean @default(false)
    isOwner     Boolean @default(false)
    latestVote  VOTE    @default(NOT_VOTED)
    score       Float   @default(0)
    order       Int     @default(0)

    vote Vote[]
}

model Vote {
    id          String @id @default(uuid())
    userId      String
    votedUserId String
    label       String

    playSession   PlaySession? @relation(fields: [playSessionId], references: [id])
    playSessionId String?
}

model Room {
    id            String @id @default(uuid())
    name          String
    round         Int    @default(0)
    roundQuestion String @default("")

    // array of prev questions
    prevQuestions Json @default("[]")

    phase GAME_PHASE @default(LOBBY)

    cardPackId String
    cardPack   CardPack @relation(fields: [cardPackId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    players PlaySession[]
}

enum GAME_PHASE {
    LOBBY
    STARTED
    ROLES
    QUESTION_TIME
    ASK_QUESTIONS
    VOTE
    VOTE_RESULTS
    OVER
}
